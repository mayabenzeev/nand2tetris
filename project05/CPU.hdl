// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    Not (in=instruction[15], out=AOrC);
    Mux16 (a=ALUOut, b=instruction, sel=AOrC, out=outMux16);
    ARegister (in=outMux16, load=AOrDest, out=RegisterA, out[0..14]=addressM);

    And (a=instruction[15],b=instruction[12],out=RegAOrMux);
    Mux16 (a=RegisterA, b=inM, sel=RegAOrMux, out=outMux162);

    ALU (x=RegisterD, y=outMux162, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOut, out=outM, zr=zr, ng=ng);

    And (a=instruction[15],b=instruction[4],out=RegDOrMux);
    DRegister (in=ALUOut, load=RegDOrMux, out=RegisterD);

    And(a=instruction[15],b=instruction[3],out=writeM);

    And (a=instruction[2], b=instruction[15], out=j1n); //if j1n==1 then we look <0
    And (a=instruction[1], b=instruction[15], out=j2n); //if j2n==1 then we look =0
    And (a=instruction[0], b=instruction[15], out=j3n); //if j3n==1 then we look >0

    And (a=zr, b=j2n, out=jeq); //=0
    And (a=ng, b=j1n, out=jlt); //<0
    Not (in=ng, out=notng); 
    Not (in=zr, out=notzr);
    And (a=notng, b=notzr, out=notzrng);
    And (a=notzrng, b=j3n, out=jgt); //>0

    // if condition is true
    Or (a=jeq, b=jlt, out=tmp);
    Or (a=jgt, b=tmp, out=ld);


    PC (in=RegisterA, inc=true, load=ld, reset=reset, out=pcout, out[0..14]=pc);
}
